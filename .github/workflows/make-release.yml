name: Make release

on:
  workflow_dispatch: # allows manual triggering

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  create-tag:
    runs-on: ubuntu-20.04

    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      name: ${{ steps.tag.outputs.name }}

    steps:
    - name: Clone
      id: checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine tag name
      id: tag
      shell: bash
      run: |
        LAST_TAG="$(git describe --tags --abbrev=0)"
        if [[ "${{ env.BRANCH_NAME }}" == "main" ]]; then
          echo "name=${LAST_TAG%-*}-${{ env.GITHUB_RUN_ID }}" >> $GITHUB_OUTPUT
        else
          SAFE_NAME=$(echo "${{ env.BRANCH_NAME }}" | tr '/' '_' | tr '-' '_')
          echo "name=${LAST_TAG%-*}-${SAFE_NAME}-${{ env.GITHUB_RUN_ID }}" >> $GITHUB_OUTPUT
        fi
        echo "Generated tag name: $(cat $GITHUB_OUTPUT)"

    - name: Create release
      id: create_release
      uses: anzz1/action-create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        draft: false
        tag_name: ${{ steps.tag.outputs.name }}

  build-binaries:
    needs:
    - create-tag

    strategy:
      matrix:
        include:
        - os: windows
          arch: amd64
        - os: linux
          arch: amd64
        - os: darwin
          arch: arm64

    runs-on: ubuntu-22.04
    
    env:
      GOOS: ${{ matrix.os }}
      GOARCH: ${{ matrix.arch }}

    steps:

    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.1'
    
    - name: Build binary
      shell: bash
      run: | 
        mkdir -p artifacts
        suffix="${{ matrix.os }}-${{ matrix.arch }}"
        if [[ "${{ matrix.os }}" == "windows" ]]; then
          suffix="$suffix.exe"
        fi
        go build -o "artifacts/cti-$suffix" ./cmd/cti/cti.go
    
    - name: Upload release
      id: upload_release
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const path = require('path');
          const fs = require('fs');
          const root = './artifacts';
          const release_id = '${{ needs.create-tag.outputs.release_id }}';
          const files = fs.readdirSync(root);
          for (const file of files) {
            console.log('uploadReleaseAsset', file);
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release_id,
              name: file,
              data: fs.readFileSync(path.join(root, file))
            });
          }
